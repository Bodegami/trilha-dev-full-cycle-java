COMANDOS BÁSICOS:

docker --version == imprime a versao do Docker instalada

docker ps == imprime os containers em execucao

docker ps -a == imprime todos os containers (em execucao e os parados)

docker run hello-world == baixa a imagem e cria um container com a imagem informada (hello-world)

docker run -i ubuntu bash == baixa a imagem do ubuntu, cria o container com a imagem e abre o terminal bash interativo

docker exec -it "nome_container" bash == acessa um container, integrando o terminal e abilitando a execucao de comandos

exit ou CTRL + D == sai de um container docker

docker start id_container/ nome_container == inicia um container parado

docker stop id_container/ nome_container == interrompe a execucao do container informado.

docker run -it --rm ubuntu:latest bash == baixa a imagem do ubuntu, cria o container com a imagem, abre o terminal bash interativo e exclui o container ao sair.

docker run -d -p 8080:80 nginx == baixa a imagem nginx, cria o container da imagem redirecionando a porta do container 8080 para a porta local 80 e sem travar o terminal.

docker stop id_container/ nome_container == interrompe a execucao do container informado.

docker rm id_container/ nome_container == exclui um container parado

docker rm id_container/ nome_container -f == força a exclusao de um container mesmo que em execucao

docker run --name meu-ubuntu ubuntu == baxa a imagem ubuntu, cria um container da imagem com o nome meu-ubuntu

docker exec id_container/ nome_container comando_bash == executa um comando informado no container informado

docker run -p 8080:80 -v ~/Projects/fullcycle3/docker/html:/usr/share/nginx/html nginx == baixa a imagem do ngix, cria um container e faz um "bind mount" do volume local para um volume do container

docker volume create nome_volume == cria um volume local com o nome informado

docker volume inspect nome_volume == imprime o detalhamento dos dados do volume informado

docker run --mount type=volume,source=meuvolume,target=/app nginx == baixa a imagem nginx, cria o container da imagem atachando o volume local "meuvolume" no container. 
A vantagem é que podemos criar varios containers compartilhando o mesmo volume.

docker run -v meuvolume:/app nginx == baixa a imagem nginx, cria o container da imagem e assim como --mount, -v atacha um volume local ao container no diretorio informado.

docker volume prune == remove todos os volumes locais que não estão sendo utilizados e informa o espaço em disco liberado.

docker images == imprime as imagens no computador.

docker pull nome_imagem:versao_da_imagem == baixa a versao da imagem informada. Caso a versao seja omitida, ele vai baixar a ultima versao disponivel.

docker rmi nome_imagem:versao_da_imagem == exclui a imagem informada.

docker build -t usuario/nome_imagem:versao_imagem . == cria uma imagem a partir da versao informada na raiz do diretorio. Para esse comando funcionar é necessário um dockerfile na raiz do diretorio.
A vantagem dessa abordagem é que podemos criar uma imagem personalizada.

docker ps -a -q == imprime apenas os id's de todos os contaners

docker rm $(docker ps -a -q) -f == exclui todos os container pelos id's. Note que são duas instrucoes dentro de um comando.

docker run --rm usuario/nome_imagem:versao_imagem echo "oi" == cria um container da imagem informada e substitui comando inicial do container pela instucao informada e executa.

docker push usuario/nome_imagem:versao_imagem === faz o push da imagem para o docker hub do usuario informado

docker -d -it --name ubuntu1 ubuntu bash == cria um container do ubuntu e com o nome ubuntu1, com terminal bash no estado "dettach".

docker attach ubuntu1 == conecta ao terminal do container informado.

docker network ls == imprime todas as networks 

docker network prune == exclui todas as networks

docker network inspect nome_network == imprime os dados da network informada e os containers conectados.

docker network create --driver tipo_driver nome_rede == cria uma rede do tipo informado e com o nome informado.

docker network connect nome_rede nome_container == conecta um container a rede informada.

docker run -d --network host nginx == cria o container conectado na rede da máquina. O ponto de atenção aqui que isso funciona no Linux, para windows e mac é necessário outras configurações.

docker logs nome_container == imprime os logs do container

docker rm -f inicio_id_container == mata o container apenas pelo inicio do id

docker images | grep laravel == busca todas imagens que contem o parametro informado (laravel)

docker network create minha_rede == cria uma network com o nome informado. Por padrão ele cria uma rede do tipo bridge

docker-compose up == executa o docker-compose.yaml

docker-compose -f meu_compose.yaml up == executa um arquivo do tipo docker-compose pelo nome informado.

docker-compose ps == imprime os status dos containers do docker-compose

docker-compose down == para execucao dos containers do docker-compose

docker-compose up -d --build == força o build dos containers atraves do Dockerfile de cada serviço informado no docker-compose







DOCKERFILE:

As principais tags do dockerfile são:

- FROM: é onde informamos a imagem e versao
- USER: é o usuário que queremos definir com padrao no container, lembrando que o mesmo já deve ser criado no container. Caso esse parametro seja omitido, por padrao o docker vai usar o usuario root do container.
- WORKDIR: é o diretorio padrao ao acessar o container
- RUN: executa um ou mais sequências de comandos como apt-get install vim e etc
- COPY: copia uma pasta do ambiente local para um diretorio dentro do container.
- CMD: executa um comando dentro do container. Esse comando pode ser substituido por um parametro hora da criacao do container
- ENTRYPOINT: executa um comando dentro do container. É um comando fixo que não pode ser substituido, mas pode ser combinado com um comando variavel.
- ENV: envia variaveis de ambiente para o container.
- EXPOSE: expoe uma porta do container. Ainda assim é necessário fazer o bind com uma porta local para acessar esta porta.


NETWORK:
- tipos de network:
    - bridge: é a network default. Ela permite um container se conectar com outro
    - host: permite uma conexao entre o container e o host. Fica na mesma rede do computador.
    - overlay: cria uma rede para que varias instancias do mesmo container possam se comunicar.
    - maclan: simula um um mac-adress de uma máquina real.
    - none: cria uma rede isolada para o container

- por padrão o docker sobe com três networks (bridge, host e none) e quando não especificamos a network, o docker utiliza a bridge como padrão.
- quando utilizamos a rede padrão bridge, os containers não consegue se comunicar pelo "nome", apenas pelo ip.
- quando criamos a nossa rede bridge, os containers conseguem se comunicar tanto pelo "nome" quanto pelo "ip".



DOCKER-COMPOSE:

    MODELO DE USO COM IMAGENS FECHADAS:

    version: '3'

            services:

              laravel:
                image: usuario/laravel:prod
                container_name: laravel
                networks:
                  - laranet

              
              nginx:
                image: usuario/nginx:prod
                container_name: nginx
                networks:
                  - laranet
                ports:
                  - "8080:80"

            networks:
              laranet:
                driver: bridge




    MODELO DE USO COM BUILD:
    
    version: '3'

        services:

          laravel:
            build:
              context: ./laravel
              dockerfile: Dockerfile.prod
            image: devbode/laravel:prod
            container_name: laravel
            networks:
              - laranet

          
          nginx:
            build:
              context: ./nginx
              dockerfile: Dockerfile.prod
            image: devbode/nginx:prod
            container_name: nginx
            networks:
              - laranet
            ports:
              - "8080:80"

        networks:
          laranet:
            driver: bridge
            
            
    MODELO COM MYSQL E SALVANDO OS DADOS LOCAL:
    
    version: '3'

        services:

          db:
            image: mysql:5.7
            command: --innodb-use-native-aio=0 --explicit_defaults_for_timestamp --default-authentication-plugin=mysql_native_password
            container_name: db
            restart: always
            tty: true
            volumes:
              - ./mysql:/var/lib/mysql
            environment:
              MYSQL_DATABASE: nodedb
              MYSQL_USER: example
              MYSQL_PASSWORD: example
              MYSQL_ROOT_PASSWORD: example
            networks:
              - node-network

        networks:
          node-network:
            driver: bridge
            
            
    MODELO RODANDO NODE E MYSQL E SALVANDO OS DADOS E PROJETO LOCAL:
    
    version: '3'

        services:

          app:
            build:
              context: node
            container_name: app
            networks:
              - node-network
            volumes:
              - ./node:/usr/src/app
            tty: true
            ports:
              - "3000:3000"


          db:
            image: mysql:5.7
            command: --innodb-use-native-aio=0 --explicit_defaults_for_timestamp --default-authentication-plugin=mysql_native_password
            container_name: db
            restart: always
            tty: true
            volumes:
              - ./mysql:/var/lib/mysql
            environment:
              MYSQL_DATABASE: nodedb
              MYSQL_USER: bode
              MYSQL_PASSWORD: bode
              MYSQL_ROOT_PASSWORD: example
            networks:
              - node-network

        networks:
          node-network:
            driver: bridge


FLAGS:

-i == modo interativo, ele anexa o seu terminal com o do container de forma que é possível acessar o container

-t == TTY, permite digtar coisas no terminal

-it == modo interativo que anexa o terminal local com o do container e possibilita a digitação de comandos

-a == exibe instâncias, imagens e containers parados 

rm == remove um processo, container, imagem, volume e etc

-p 8080:9000 == publica a porta 8080 do container para a minha porta local 9000 (redireciona de 8080 para 9000)

-d == executa o script e libera o terminal. É D de detached

-f == força a execucao de um processo

--name meu-container == atribui o nome informado ao container

-v rota_local:rota_do_container == cria um "bind mount" que é um volume local que será atachado ao container em execucao. É importante lembrar que ao excluir este container, esse volume não sofrera nenhum impacto.

--mount  type=bind, source="$(pwd)"/html, target=/usr/share/nginx/html == tem a mesma funcionalidade do -v, porém é mais atual e explicito. Além disso, o --mount valida se a pasta ou arquivo informado existe, já o -v cria o arquivo ou pasta caso ele nao exista.





TIPS:

- ALTERANDO A PAGINA PRINCIPAL DE CONTAINER NGINX:
    - acessamos o container com terminal bash: docker exec -it id_container/ nome_container bash
    - atualizamos o cache do apt-get : apt-get update
    - instalamos o editor de textos vim: apt-get install vim
    - acessamos o diretorio do arquivo principal: cd /usr/share/nginx
    - executamos o editor de texto do arquivo index.html: vim index.html
    - abilitamos o modo edicao: pressionar tecla "i". final do terminal de aparecer INSERT indicando que o modo edicao está ativo
    - alteramos o arquivo: alteramos da forma que quisermos
    - saindo do modo edicao: pressionar a tecla ESC para sair do modo edicao. A palavra INSERT deve sumir do terminal
    - salvando o arquivo: pressionamos as teclas ":w" para salvar o arquivo. O W é de write
    - saindo do vim: pressionamos as teclas ":q" para sair do vim. O Q é de quit.
    
    
- EXIBINDO INFORMACOES DO CONTAINER: 
    - acessamos o container com terminal bash: docker exec -it id_container/ nome_container bash
    - executamos o comando: uname -a. As informacoes serao printadas na tela
    
- VERIFICANDO O DOCKERFILE DE UMA IMAGEM:
    - acessamos o repositorio da imagem no docker hub
    - acessamos a versao que buscamos e seremos redirecionados para a github da imagem
    - no repositorio do gitub é possivel acessar o dockerfile e verificar todas as instrucoes.
  
- Linux tips:
    - echo $(pwd) == imprime o diretorio atual
    - uname -a == imprime a versao linux
    
- Sobre o arquivo docker-entrypoint.sh:
    - o arquivo docker-entrypoint.sh tem uma instrucao "exec '$@". 
    - essa instrucao indica que ele aceita qualquer instrucao apos a sua execucao.
    - exemplo: ./docker-entrypoint.sh echo "hello"
    - ele ira executar toda logica dentro do arquivo docker-entrypoint.sh e depois ira imprimir no console o "hello"
    
- Container acessando um recurso em execucao na máquina:
    - acesamos o container
    - depois executamos: apt-get update && apt-get install curl -y
    - para acessar o localhost da sua máquina, usamos: curl http://host.docker.internal:porta_do_recurso
    -- dessa forma conseguimos acessar de dentro de um container, um endpoint de uma aplicaco rodando localmente.
    
- Instalando um framework php em container:
    - baixamos a imagem da linguagem e acessamos o container: docker run -it --name php php:7.4-cli bash
    - atualizamos as libs do container: apt-get update
    - criamos um diretorio para framework dentro do container: mkdir /var/www
    - para instalar o laravel, vamos utilizar o composer: acessar a documentacao https://getcomposer.org/
    - executamos os comandos de instalacao da documentacao dentro do container: https://getcomposer.org/download/
    - precisamos instalar o zip no container: apt-get install libzip-dev -y
    - precisamos instalar a extensao zip do php:  docker-php-ext-install zip
    - vamos criar o projeto: php composer.phar create-project --prefer-dist laravel/laravel laravel
    - criamos um Dockerfile com comandos que executamos até agora:                                                          
    - adicionamos o comando no Dockerfile que vai manter a aplicacao executando: ENTRYPOINT ["php","laravel/artisan","serve"]
    - adicionamos o comando que vai expor o endpoint no localhost da máquina local: CMD ["--host=0.0.0.0"]
    - geramos o build do Dockerfile: docker build -t usuario/imagem:versao .
    - executamos a imagem que criamos: docker run --rm -d --name laravel -p 8001:8001 usuario/imagem
    - podemos subir a imagem em outra porta:  docker run --rm -d --name laravel -p 8001:8001 usuario/imagem --host=0.0.0.0 --port=8001
    - exemplo do Dockerfile: 
                                FROM php:7.4-cli
                                WORKDIR /var/www
                                RUN apt-get update && \ 
                                    apt-get install libzip-dev -y && \
                                    docker-php-ext-install zip
                                RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
                                    php composer-setup.php && \
                                    php -r "unlink('composer-setup.php');"
                                RUN php composer.phar create-project --prefer-dist laravel/laravel laravel
                                ENTRYPOINT [ "php","laravel/artisan","serve" ]
                                CMD [ "--host=0.0.0.0" ]
                                
- Criando aplicação Node.js sem o Node:
    - criamos um diretorio: mkdir node
    - acessamos o diretorio: cd /node
    - executamos o docker run da linguagem, fazemos o bind de um diretorio local e executamos o bash: docker run --rm -it -v $(pwd)/:/usr/src/app -p 3000:3000 node:15 bash 
    - acessamos o diretorio do container: cd /usr/src/app
    - criamos o arquivo package.json: npm init -y
    - instalamos o express: npm install express --save
    - criamos o arquivo principal do projeto: touch index.json
    - criamos toda logica para expor um endpoint:
                                                    const express = require('express')
                                                    const app = express()
                                                    const port = 3000
                                                    
                                                    app.get('/', (req, res) => {
                                                        res.send('<h1>Full Cycle 3!!!</h1>')
                                                    })
                                                    
                                                    app.listen(port, () => {
                                                        console.log(`Rodando na porta ${port}`)
                                                    })
    - executamos o arquivo index.js: node index.js
    - criamos um Dockerfile do projeto:
                                        FROM node:15
                                        WORKDIR /usr/src/app
                                        COPY . .
                                        EXPOSE 3000
                                        CMD ["node","index.js"]
    - executamos o build da imagem: docker build -t usuario/imagem:versao .
    - criamos um container com a nossa imagem: docker run --name hello-express -p 3000:3000 nome_imagem
                                        
- Executando o build com um Dockerfile especifico:
    - acessamos o diretorio com os Dockerfiles:
    - executamos o build apontando para o Dockerfile especifico: docker build -t usuario/imagem . -f nome_dockerfile
                      
- UTILIZANDO O MULTISTAGE BUILDING PARA CRIAR UM DOCKERFILE COM LARAVEL:
    - Utilizamos o Dockerfile que criamos para o Laravel e removemos o ENTRYPOINT/CMD: Copiamos o Dockerfile e renomeamos para Dockerfile.prod. Depois excluimos o Entrypoint e o CMD do arquivo.
    - No final do arquivo definimos o from para o estagio de build 2: FROM php:7.4-fpm-alpine
    - definimos o Workir: WORKDIR /var/www
    - agora precisamos remover a pasta html que existe dentro do nosso estagio de build 1: RUN rm -rf /var/www/html
    - adicionamos um alias a imagem do laravel no inicio do Dockerfile: FROM php:7.4-cli AS builder
    - agora vamos copiar o estagio de build 1 para no nosso estagio de build 2: COPY --from=builder /var/www/laravel .
    - precisamos liberar as permissoes de leitura e escrita para o usuario do alpine no nosso diretorio: RUN chown -R www-data:www-data /var/wwww
    - precisamos expor uma porta: EXPOSE 9000
    - precisamos também executar o php: CMD [ "php-fpm" ]
    - executamos o build da imagem: docker build -t usuario/laravel:prod laravel -f laravel/Dockerfile.prod 
    - Exemplo do Dockerfile.prod: 
                                    # -------------- PRIMEIRO ESTAGIO DE BUILD ------------------------
                                    FROM php:7.4-cli AS builder

                                    WORKDIR /var/www

                                    # Atualiza as libs do container, instala a lib zip e a extensao zip para php
                                    RUN apt-get update && \ 
                                        apt-get install libzip-dev -y && \
                                        docker-php-ext-install zip
                                    
                                    # Instala o gerenciador de pacotes "composer" do php
                                    RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
                                        php composer-setup.php && \
                                        php -r "unlink('composer-setup.php');"

                                    # Instala o framework Laravel e cria um projeto 
                                    RUN php composer.phar create-project --prefer-dist laravel/laravel laravel

                                    # -------------- SEGUNDO ESTAGIO DE BUILD -------------------------

                                    FROM php:7.4-fpm-alpine
                                    WORKDIR /var/www
                                    RUN rm -rf /var/www/html
                                    COPY --from=builder /var/www/laravel .
                                    RUN chown -R www-data:www-data /var/www
                                    EXPOSE 9000
                                    CMD [ "php-fpm" ]
    
- CRIANDO UM PROXY REVERSO COM NGINX CHAMANDO O LARAVEL:
    - acessamos o diretorio do nginx: cd nginx
    - criamos um arquivo de configuracao do nginx: touch nginx.conf 
    - adicionamos todos os parametros necessarios para proxy reverso: as informacoes estão no arquivo nginx.conf do repositorio deste projeto
    - copiamos o arquivo dockerfile do nginx e renomeamos para Dockerfile.prod: cp Dockerfile Dockerfile.prod 
    - no Dockerfile.prod vamos ajustar a versão da imagem: FROM nginx:1.15.0-alpine
    - vamos remover a configuracao default do nginx: RUN rm /etc/nginx/conf.d/default.conf
    - vamos copiar o nosso arquivo de configuracao do nginx para dentro diretorio da imagem: COPY nginx.conf /etc/nginx/conf.d
    - precisamos criar um arquivo .php para fazer o redirecionamento para o container do laravel: RUN mkdir /var/www/html -p && touch /var/www/html/index.php 
        - É esse arquivo index que será responsavel pelo redirecionamento, caso contrario retorna um status code 404.
    - criamos a imagem do nginx.prod: docker build -t devbode/nginx:prod . -f Dockerfile.prod
    - criamos um network bridge para o container do nginx se comunicar com o container do laravel: docker network create laranet
    - acessamos o Dockerfile.prod do laravel e adicionamos um link simbolico antes da linha EXPOSE: RUN ln -s public html
    - geramos o build novamente do Dockerfile.prod do laravel: docker build -t devbode/laravel:prod laravel -f laravel/Dockerfile.prod 
    - executamos o build da imagem do laravel: docker run -d --network laranet --name laravel usuario/laravel:prod 
    - executamos o build da imagem do nginx: docker run -d --network laranet --name nginx -p 8080:80 usuario/nginx:prod
    - pronto: Quando chamamos a porta 8080, o nginx recebe a requisição, carrega o arquivo index.php em branco e redireciona a chamada pro container do laravel por de baixo dos panos.
    - Dockerfiles: os dockerfiles dos dois projetos estão em suas respectivas pastas deste projeto.
    - Obs: O nginx faz a exposicao de arquivos estaticos, mas para isso precisamos mover os arquivos para dentro do container do nginx
                                           
                                        